# security:
#     # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#     providers:
#         in_memory: { memory: ~ }
#     firewalls:
#         dev:
#             pattern: ^/(_(profiler|wdt)|css|images|js)/
#             security: false
#         main:
#             anonymous: true

#             # activate different ways to authenticate

#             # http_basic: true
#             # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

#             # form_login: true
#             # https://symfony.com/doc/current/security/form_login_setup.html

#     # Easy way to control access for large sections of your site
#     # Note: Only the *first* access control that matches will be used
#     access_control:
#         # - { path: ^/admin, roles: ROLE_ADMIN }
#         # - { path: ^/profile, roles: ROLE_USER }



# TODO ::: verifier que le fait de lier les 3 entités dans un seul provider soit autorisé !!!!!!!
security:

    encoders:
        App\Entity\Talent:
            algorithm: bcrypt
        App\Entity\Company:
            algorithm: bcrypt
        App\Entity\Admin:
            algorithm: bcrypt

    providers:
        chain_provider:
            chain:
                providers: [admin, talent, company]

        admin:
            entity: { class: App\Entity\Admin, property: email }
        talent:
            entity: { class: App\Entity\Talent, property: email }
        Company:
            entity: { class: App\Entity\Company, property: email }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
